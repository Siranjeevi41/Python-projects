class CarModel:
    def __init__(self, model_id, display_name, accept_orders, engine_id, engine_make_date, engine_fuel_type, price):
        self.model = {
            "id": model_id,
            "displayName": display_name
        }
        self.acceptOrders = accept_orders
        self.engine = {
            "id": engine_id,
            "dateOfMake": engine_make_date,
            "fuelType": engine_fuel_type
        }
        self.price = price
        
        
        
the base class CarModel. It has an __init__ method (constructor) that takes in various attributes

such as model_id, display_name, accept_orders, engine_id, engine_make_date, engine_fuel_type, and price.

Inside the constructor, these attributes are assigned to corresponding instance variables using self.

self.model is a dictionary containing the model_id and display_name.

self.acceptOrders holds the boolean value accept_orders.

self.engine is a dictionary containing the engine_id, engine_make_date, and engine_fuel_type.

self.price stores the price of the car model.



python
Copy code
class GA(CarModel):
    def __init__(self, model_id, display_name):
        accept_orders = True
        engine_id = "MTGBD37489IDUDU"
        engine_make_date = "2022-03-28"
        engine_fuel_type = "diesel"
        price = "500000"  # GA model's price
        super().__init__(model_id, display_name, accept_orders, engine_id, engine_make_date, engine_fuel_type, price)
This section defines a class GA that inherits from the CarModel base class.
The __init__ method of GA class takes in model_id and display_name as arguments.
Inside the __init__ method, specific values are assigned to accept_orders, engine_id, engine_make_date, engine_fuel_type, and price for the GA car model.
The super() function is used to call the constructor of the base class (CarModel) and pass the appropriate arguments.
The SPX and LE classes have similar structures to GA, with different values for price based on the given rules.

python
Copy code
ga_model = GA("8787878d8d7d878d78eaaa", "Tata Nano - GA")
spx_model = SPX("8787878d8d7d878d78ebbb", "Tata Nano - SPX")
le_model = LE("8787878d8d7d878d78eccc", "Tata Nano - LE")
Here, instances of the GA, SPX, and LE classes are created with different model IDs and display names.
The constructor of each class is called with the respective arguments to initialize the instances.
python
Copy code
print(ga_model.model["displayName"], ga_model.price)   # Output: Tata Nano - GA 500000
print(spx_model.model["displayName"], spx_model.price)  # Output: Tata Nano - SPX 1000000
print(le_model.model["displayName"], le_model.price)   # Output: Tata Nano - LE 1500000
Finally, these print statements demonstrate how to access the attributes of each instance.
The displayName and price attributes are printed for each car model instance using the dot notation (instance_name.attribute_name).
